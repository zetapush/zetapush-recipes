/**
 *
 */
macroscript core_room__createInvitationByService(
	/** Room */ @NotNull Room room,
	/** User key to invite */ string guest,
	/** Invitation messsage */ string message = '',
	/** Invitation metadata */ map context = {},
	/** Invitation expiry */ number expiry = 0,
	/** Storage Service */ @NotNull service<gda> zpService
) {
	/** Local variables */
	const owner = __userKey;
	const createdAt = time:now();
	const key = str:join('', CORE__ROOM_TYPE_INVITATION, room.id);
	const invitation = new Invitation(key, owner, null, expiry, createdAt, context, message);
	/** Store message */
	zpService.puts({
		rows: [{
			key,
			data: {
				[COLUMN_INVITATION_ROOM]: room.id,
				[COLUMN_INVITATION_GUEST]: guest,
				[COLUMN_INVITATION_EXPIRY]: expiry,
				[COLUMN_INVITATION_CREATED_AT]: createdAt,
				[COLUMN_INVITATION_CONTEXT]: context,
				[COLUMN_INVITATION_MESSAGE]: message
			}
		}],
		table: TABLE_ROOM_INVITATION,
		owner: room.owner
	});
	/** Execute all registered macros */
	zpRecipeUtils::zpServiceTrigger.trigger({
		event: EVENT__CREATE_INVITATION,
		data: { room, invitation }
	});
} return invitation on channel __selfName
