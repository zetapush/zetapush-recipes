const DIRECTION_ASC = 'ASC';
const DIRECTION_DESC = 'DESC';

class Pagination {
	/** The number of elements by page (minimum 1) */
	@NotNull @Min(1) number pageSize;
	/** The page number (zero-based) */
	@NotNull @Min(0) number pageNumber;
	/** Optional sort direction ('ASC'/'DESC'). Default is ASC when not specified. */
	@Enum([DIRECTION_ASC, DIRECTION_DESC])
	string direction = DIRECTION_ASC;
}

class ResponsePagination extends Pagination {
	/** true to indicate if there is one more page available, false otherwise */
	boolean hasNext;
}

class PageContent {
	/** The content */
	object content;
	/** Pagination information (also tells if there are more pages available to load) */
	ResponsePagination page;
}


/**
	<p>
	Request the stack service list with optional pagination.
	If pagination is provided, it will determine if there is another available page.
	</p>
	
	The response must be unwrapped:
	<ul>
	<li>call response.result.response.result to get the stack result</li>
	<li>call response.result.response.request to get original stack request</li>
	<li>call response.result.response.result.content to get stack list</li>
	<li>call response.result.response.result.page to get result pagination</li>
	</ul>
	
	The result pagination object will have the following properties:
	<ul>
	<li>{pageSize}: the result page size (like usually) </li>
	<li>{pageNumber}: the result page number (like usually) </li>
	<li>{direction}: the result order direction (like usually) </li>
	<li><b>{hasNext}</b>: true to indicate if there is one more page available, false otherwise</li>
	</ul>
	
	<p>
	If no pagination is provided, all the elements are loaded so {hasNext} is always false.
	</p>
	
	
	Exemple of use:
	<pre>
		var response = call zpRecipeUtils::paginatedStackList({
			stackService: zpServiceStack,
			stack: 'foo',
			owner: 'toto',
			page: { pageSize: 20, pageNumber: 0 }
		}) hardFail;
		// unwrap the response
		var unwrappedResponse = response.result;
		for item in unwrappedResponse.result.content {
			trace(item);
		}
		var hasNextPage = unwrappedResponse.result.page.hasNext;
	</pre>
	
*/
macroscript paginatedStackList(
	/** Required wrapped stack service to request */
	service<stack> stackService,
	/** the stack name (see 'stack' parameter documentation of stack service for more details) */
	string stack,
	/** Optional User key. When calling the API, defaults to the current (calling) user's primary key. 
		For impersonation purposes, the caller may use the key of another user, 
		provided that the proper authorizations have been given by the impersonated user 
		(see 'owner' parameter documentation of stack service for more details) */
	string owner = null,
	/** Optional requested pagination (see 'page' parameter documentation of stack service for more details):
		<ul>
		<li><i>pageNumber</i>:	Page number (zero-based). Default is 0 when not specified.</li>
		<li><i>pageSize</i>:	Page size (minimum 1).</li>
		<li><i>direction</i>:	Optional sort direction ('ASC'/'DESC'). Default is ASC when not specified.</li>
		</ul>
	 */
	Pagination page = null
) {
	// call the service with asked elements
	var response = stackService.list({ stack, owner, page });
	var hasNextPage = false;
	if(page!=null) {
		// if content array size is the same as the request page size
		// then it may have more elements
		// else (less returned element than requested) it means that there is no more elements
		// (no need to request for extra empty data)
		if(coll:size(response.result.content)>=page.pageSize) {
			// call the service with one more element to know if there is at least one more item
			var moreResponse = stackService.list({ stack, owner, page: usr:computePageForHasNext(page) });
			hasNextPage = coll:size(moreResponse.result.content)>0;
		}
	}
	/** Destructure result properties */
	var request = response.request;
	var result = PageContent.new(usr:formatPaginatedResult(response.result, hasNextPage));
} broadcast { request, result } on channel __selfName



/**
	<p>
	Request the gda service list with optional pagination.
	If pagination is provided, it will determine if there is another available page.
	</p>
	
	The response must be unwrapped:
	<ul>
	<li>call response.result.response.result to get the stack result</li>
	<li>call response.result.response.request to get original stack request</li>
	<li>call response.result.response.result.content to get stack list</li>
	<li>call response.result.response.result.page to get result pagination</li>
	</ul>
	
	The result pagination object will have the following properties:
	<ul>
	<li>{pageSize}: the result page size (like usually) </li>
	<li>{pageNumber}: the result page number (like usually) </li>
	<li>{direction}: the result order direction (like usually) </li>
	<li><b>{hasNext}</b>: true to indicate if there is one more page available, false otherwise</li>
	</ul>
	
	<p>
	If no pagination is provided, all the elements are loaded so {hasNext} is always false.
	</p>
	
	Exemple of use:
	<pre>
		var response = call zpRecipeUtils::paginatedGdaList({
			gdaService: zpServiceGda,
			table: 'foo',
			owner: 'toto',
			page: { pageSize: 20, pageNumber: 0 }
		}) hardFail;
		// unwrap the response
		var unwrappedResponse = response.result;
		for item in unwrappedResponse.result.content {
			trace(item);
		}
		var hasNextPage = unwrappedResponse.result.page.hasNext;
	</pre>
*/
macroscript paginatedGdaList(
	/** the gda service to request */
	service<gda> gdaService,
	/** table name (see 'table' parameter documentation of gda service for more details) */
	string table,
	/** Optional column/cell specifications of the columns/cells to retrieve 
		(see 'columns' parameter documentation of gda service for more details) */
	object columns = null,
	/** Otional User key. When calling the API, defaults to the current (calling) user's primary key. 
		For impersonation purposes, the caller may use the key of another user, 
		provided that the proper authorizations have been given by the impersonated
		user (see 'table' parameter documentation of gda service for more details) */
	string owner = null,
	/** Optional requested pagination (see 'page' parameter documentation of gda service for more details):
		<ul>
		<li><i>pageNumber</i>:	Page number (zero-based). Default is 0 when not specified.</li>
		<li><i>pageSize</i>:	Page size (minimum 1).</li>
		<li><i>direction</i>:	Optional sort direction ('ASC'/'DESC'). Default is ASC when not specified.</li>
		</ul>
	 */
	Pagination page = null
) {
	// call the service with asked elements
	var response = gdaService.list({ table, columns, owner, page });
	var hasNextPage = false;
	if(page!=null) {
		// if content array size is the same as the request page size
		// then it may have more elements
		// else (less returned element than requested) it means that there is no more elements 
		// (no need to request for extra empty data)
		if(coll:size(response.result.content)>=page.pageSize) {
			// call the service with one more element to know if there is at least one more item
			var moreResponse = gdaService.list({ table, columns, owner, page: usr:computePageForHasNext(page) });
			hasNextPage = coll:size(moreResponse.result.content)>0;
		}
	}
	/** Destructure result properties */
	var request = response.request;
	var result = PageContent.new(usr:formatPaginatedResult(response.result, hasNextPage));
} broadcast { request, result } on channel __selfName



/**
	<p>
	Request the gda service range with optional pagination.
	If pagination is provided, it will determine if there is another available page.
	</p>
	
	The response must be unwrapped:
	<ul>
	<li>call response.result.response.result to get the stack result</li>
	<li>call response.result.response.request to get original stack request</li>
	<li>call response.result.response.result.content to get stack list</li>
	<li>call response.result.response.result.page to get result pagination</li>
	</ul>
	
	The result pagination object will have the following properties:
	<ul>
	<li>{pageSize}: the result page size (like usually) </li>
	<li>{pageNumber}: the result page number (like usually) </li>
	<li>{direction}: the result order direction (like usually) </li>
	<li><b>{hasNext}</b>: true to indicate if there is one more page available, false otherwise</li>
	</ul>
	
	<p>
	If no pagination is provided, all the elements are loaded so {hasNext} is always false.
	</p>
	
	Exemple of use:
	<pre>
		var response = call zpRecipeUtils::paginatedGdaRange({
			gdaService: zpServiceGda,
			table: 'foo',
			start: '000',
			stop: '999',
			owner: 'toto',
			page: { pageSize: 20, pageNumber: 0 }
		}) hardFail;
		// unwrap the response
		var unwrappedResponse = response.result;
		for item in unwrappedResponse.result.content {
			trace(item);
		}
		var hasNextPage = unwrappedResponse.result.page.hasNext;
	</pre>
*/
macroscript paginatedGdaRange(
	/** the gda service to request */
	service<gda> gdaService,
	/** table name (see 'table' parameter documentation of gda service for more details) */
	string table,
	/** Start row key (inclusive) */
	string start,
	/** Stop row key (exclusive) */
	string stop,
	/** Optional column/cell specifications of the columns/cells to retrieve 
		(see 'columns' parameter documentation of gda service for more details) */
	object columns = null,
	/** Otional User key. When calling the API, defaults to the current (calling) user's primary key. 
		For impersonation purposes, the caller may use the key of another user, 
		provided that the proper authorizations have been given by the impersonated
		user (see 'table' parameter documentation of gda service for more details) */
	string owner = null,
	/** Optional requested pagination (see 'page' parameter documentation of gda service for more details):
		<ul>
		<li><i>pageNumber</i>:	Page number (zero-based). Default is 0 when not specified.</li>
		<li><i>pageSize</i>:	Page size (minimum 1).</li>
		<li><i>direction</i>:	Optional sort direction ('ASC'/'DESC'). Default is ASC when not specified.</li>
		</ul>
	 */
	Pagination page = null
) {
	// call the service with asked elements
	var response = gdaService.range({ start, stop, table, columns, owner, page });
	var hasNextPage = false;
	if(page!=null) {
		// if content array size is the same as the request page size
		// then it may have more elements
		// else (less returned element than requested) it means that there is no more elements 
		// (no need to request for extra empty data)
		if(coll:size(response.result.content)>=page.pageSize) {
			// call the service with one more element to know if there is at least one more item
			var moreResponse = gdaService.range({ start, stop, table, columns, owner, page: usr:computePageForHasNext(page) });
			hasNextPage = coll:size(moreResponse.result.content)>0;
		}
	}
	/** Destructure result properties */
	var request = response.request;
	var result = PageContent.new(usr:formatPaginatedResult(response.result, hasNextPage));
} broadcast { request, result } on channel __selfName


function formatPaginatedResult(originalResult, hasNextPage) {
	var originalPagination = originalResult.page;
} return {
	content: originalResult.content,
	page: ResponsePagination.new({
		pageNumber : originalPagination.pageNumber,
		pageSize : originalPagination.pageSize,
		direction : originalPagination.direction,
		hasNext : hasNextPage
	})
}

function computePageForHasNext(originalPagination) return { 
	pageNumber: (originalPagination.pageNumber+1)*originalPagination.pageSize, 
	pageSize: 1, 
	direction: originalPagination.direction
}

